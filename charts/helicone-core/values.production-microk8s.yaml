################################################################################
#
#              HELICONE CORE - PRODUCTION MICROK8S CONFIGURATION
#
################################################################################
global:
  # Use local PostgreSQL for production MicroK8s
  postgresql:
    auth:
      database: helicone
      username: helicone_admin
      # Use a proper secret in production
      existingSecret: "helicone-postgres-credentials"
      secretKeys:
        adminPasswordKey: "password"

postgresql:
  # Enable PostgreSQL for production MicroK8s
  enabled: true
  auth:
    database: helicone
    username: helicone_admin
    existingSecret: "helicone-postgres-credentials"
    secretKeys:
      adminPasswordKey: "password"
  primary:
    persistence:
      enabled: true
      storageClass: "hdd-bulk"  # Use your production storage class
      size: 20Gi
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 1000m

# Disable Aurora for MicroK8s
aurora:
  enabled: false

helicone:
  web:
    enabled: true
    image:
      repository: helicone/web
      pullPolicy: IfNotPresent
      tag: "latest"
    replicaCount: 2  # Multiple replicas for production
    service:
      annotations: {}
      type: ClusterIP
      port: 3000
    extraEnvVars: []
    ingress:
      enabled: true
      className: "nginx"
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        external-dns.alpha.kubernetes.io/hostname: "helicone.${base_domain}"
        external-dns.alpha.kubernetes.io/target: "${cluster_ip}"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        # Enable HTTP/HTTPS endpoint monitoring
        prometheus.io/probe: "true"
        prometheus.io/probe-module: "https_2xx"
        prometheus.io/probe-path: "/"
      hosts:
        - host: "helicone.${base_domain}"
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: helicone-web
                  port:
                    number: 3000
      tls:
        - secretName: "helicone-origin-tls"
          hosts:
            - "helicone.${base_domain}"
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 2Gi
    verticalPodAutoscaler:
      enabled: false
    podDisruptionBudget:
      enabled: true
      minAvailable: 1
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    postgresMigrationRunner:
      image:
        repository: helicone/migrations
        pullPolicy: IfNotPresent
        tag: "latest"
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 500m

  clickhouse:
    enabled: true
    image:
      repository: clickhouse/clickhouse-server
      pullPolicy: IfNotPresent
      tag: "23.4.2.11"
    replicaCount: 1
    service:
      annotations: {}
      type: ClusterIP
      port: 8123
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 4Gi
        cpu: 2000m
    persistence:
      storageClass: "hdd-bulk"  # Use your production storage class
      size: 50Gi

  minio:
    enabled: true
    image:
      repository: minio/minio
      pullPolicy: IfNotPresent
      tag: "RELEASE.2023-05-18T00-05-36Z"
    replicaCount: 1
    service:
      annotations: {}
      type: ClusterIP
      port: 9000
      consolePort: 9001
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 1000m
    persistence:
      storageClass: "hdd-bulk"  # Use your production storage class
      size: 100Gi
    ingress:
      enabled: true
      ingressClassName: "nginx"
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        external-dns.alpha.kubernetes.io/hostname: "minio.${base_domain}"
        external-dns.alpha.kubernetes.io/target: "${cluster_ip}"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        prometheus.io/probe: "true"
        prometheus.io/probe-module: "https_2xx"
        prometheus.io/probe-path: "/minio/health/live"
      hosts:
        - host: "minio.${base_domain}"
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: helicone-minio
                  port:
                    number: 9001
      tls:
        - secretName: "minio-origin-tls"
          hosts:
            - "minio.${base_domain}"
    setup:
      image:
        repository: minio/mc
        tag: "latest"
        pullPolicy: IfNotPresent
      buckets:
        - "request-response-storage"

  jawn:
    enabled: true
    image:
      repository: helicone/jawn
      pullPolicy: IfNotPresent
      tag: "latest"
    replicaCount: 2  # Multiple replicas for production
    service:
      annotations: {}
      type: ClusterIP
      port: 8585
    extraEnvVars: []
    publicUrl: "https://helicone.${base_domain}/jawn"
    ingress:
      enabled: true
      className: "nginx"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/proxy-body-size: "100m"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        external-dns.alpha.kubernetes.io/hostname: "helicone.${base_domain}"
        external-dns.alpha.kubernetes.io/target: "${cluster_ip}"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        prometheus.io/probe: "true"
        prometheus.io/probe-module: "https_2xx"
        prometheus.io/probe-path: "/jawn/healthcheck"
      hosts:
        - host: "helicone.${base_domain}"
          paths:
            - path: /jawn(/|$)(.*)
              pathType: ImplementationSpecific
              backend:
                service:
                  name: helicone-jawn
                  port:
                    number: 8585
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1Gi
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80

  config:
    vercelEnv: "production"
    clickhouseHost: "helicone-core-clickhouse"
    clickhousePort: "8123"
    clickhouseUser: "default"
    s3BucketName: "request-response-storage"
    s3Endpoint: "http://helicone-core-minio:9000"
    openaiProxyPort: "8787"
    heliconeApiPort: "8788"
    anthropicProxyPort: "8789"
    gatewayApiPort: "8790"
    jawnPort: "8585"
    jawnPublicUrl: "https://helicone.${base_domain}/jawn"
    kongHttpPort: "8000"
    kongHttpsPort: "8443"
    pgrstDbSchemas: "public,storage,graphql_public"
    siteUrl: "https://helicone.${base_domain}"
    additionalRedirectUrls: ""
    jwtExpiry: "3600"
    disableSignup: "false"
    apiExternalUrl: "https://helicone.${base_domain}"
    mailerUrlpathsConfirmation: "/auth/v1/verify"
    mailerUrlpathsInvite: "/auth/v1/verify"
    mailerUrlpathsRecovery: "/auth/v1/verify"
    mailerUrlpathsEmailChange: "/auth/v1/verify"
    enableEmailSignup: "true"
    enableEmailAutoconfirm: "false"
    enablePhoneSignup: "true"
    enablePhoneAutoconfirm: "true"
    studioDefaultOrganization: "Default Organization"
    studioDefaultProject: "Default Project"
    studioPort: "3000"
    imgproxyEnableWebpDetection: "true"
    functionsVerifyJwt: "false"
    dockerSocketLocation: "/var/run/docker.sock"
    googleProjectId: "GOOGLE_PROJECT_ID"
    googleProjectNumber: "GOOGLE_PROJECT_NUMBER"
    nodeEnv: "production"

  secrets:
    # Production secrets - these should be managed externally
    # and referenced via existingSecret
    betterAuthSecret: ""  # Set via external secret
    stripeSecretKey: ""   # Set via external secret
    minioRootUser: ""     # Set via external secret
    minioRootPassword: "" # Set via external secret
    user: "default"
    s3AccessKey: ""       # Set via external secret
    s3SecretKey: ""       # Set via external secret
    grafanaAdminPassword: "" # Set via external secret

mailhog:
  # Disable MailHog in production, use real SMTP
  enabled: false

# Beyla configuration (can be enabled for observability)
beyla:
  enabled: false

# External secrets configuration (if using external-secrets operator)
externalSecrets:
  enabled: false
  secretStore:
    name: "vault-backend"
    kind: "SecretStore"
  secrets:
    postgres:
      name: "helicone-postgres-credentials"
      data:
        - secretKey: "password"
          remoteRef:
            key: "helicone/postgres"
            property: "password"
    minio:
      name: "helicone-minio-secrets"
      data:
        - secretKey: "root_user"
          remoteRef:
            key: "helicone/minio"
            property: "root_user"
        - secretKey: "root_password"
          remoteRef:
            key: "helicone/minio"
            property: "root_password"
    app:
      name: "helicone-web-secrets"
      data:
        - secretKey: "BETTER_AUTH_SECRET"
          remoteRef:
            key: "helicone/app"
            property: "better_auth_secret"
        - secretKey: "STRIPE_SECRET_KEY"
          remoteRef:
            key: "helicone/app"
            property: "stripe_secret_key"